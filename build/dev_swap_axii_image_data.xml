<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="SwapAxiiImageData" class="vtkPythonProgrammableFilter" label="Swap Axii Image Data">
      <Documentation
        long_help=""
        short_help="">
      </Documentation>
        <Hints>
            <ShowInMenu category="CSM Geophysics Filters DEV" />
        </Hints>

<IntVectorProperty
    name="Swap"
    command="SetParameter"
    number_of_elements="1"
    initial_string="test_drop_down_menu"
    default_values="0">
    <EnumerationDomain name="enum">
          <Entry value="0" text="Swap X and Y axii"/>
          <Entry value="1" text="Swap X and Z axii"/>
          <Entry value="2" text="Swap Y and Z axii"/>
    </EnumerationDomain>
    <Documentation>
        This property indicates which two axii will be swapped.
    </Documentation>
</IntVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkImageData"/>
          </DataTypeDomain>
      </InputProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Swap"
        label="Swap"
        initial_string="Swap"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from vtk.util import numpy_support as nps&#xA;import numpy as np&#xA;from vtk.numpy_interface import dataset_adapter as dsa&#xA;pdi = self.GetInput() #vtkImageData&#xA;pdo = self.GetOutput() #vtkImageData&#xA;&#xA;#pdo.DeepCopy(pdi)&#xA;&#xA;# Input Dimensions:&#xA;[ix,iy,iz] = pdi.GetDimensions()&#xA;[iox, ioy, ioz] = pdi.GetOrigin()&#xA;[isx, isy, isz] = pdi.GetSpacing()&#xA;&#xA;# Default Sawp (X and Y):&#xA;d1, d2 = 0, 1&#xA;# Default Switch of extents:&#xA;nx, ny, nz = iy, ix, iz&#xA;# Default switch of origin:&#xA;oox, ooy, ooz = ioy, iox, ioz&#xA;# Default switch of spacing:&#xA;osx, osy, osz = isy, isx, isz&#xA;&#xA;# Determine Swap order&#xA;if Swap == 0:&#xA;    # Swap X and Y&#xA;    d1, d2 = 1, 0&#xA;    nx, ny, nz = iy, ix, iz&#xA;    oox, ooy, ooz = ioy, iox, ioz&#xA;    osx, osy, osz = isy, isx, isz&#xA;elif Swap == 1:&#xA;    # Swap X and Z&#xA;    d1, d2 = 1, 2&#xA;    nx, ny, nz = iz, iy, ix&#xA;    oox, ooy, ooz = ioz, ioy, iox&#xA;    osx, osy, osz = isz, isy, isx&#xA;elif Swap == 2:&#xA;    # Swap Y and Z&#xA;    d1, d2 = 0, 2&#xA;    nx, ny, nz = ix, iz, iy&#xA;    oox, ooy, ooz = iox, ioz, ioy&#xA;    osx, osy, osz = isx, isz, isy&#xA;else:&#xA;    raise Exception('Unknown axii swap.')&#xA;&#xA;pdo.SetDimensions(nx, ny, nz)&#xA;pdo.SetOrigin(oox, ooy, ooz)&#xA;pdo.SetSpacing(osx, osy, osz)&#xA;pdo.SetExtent(0,nx-1, 0,ny-1, 0,nz-1)&#xA;&#xA;wpdi = dsa.WrapDataObject(pdi)&#xA;narr = pdi.GetPointData().GetNumberOfArrays()&#xA;&#xA;# TODO: the swap/reshape is not working&#xA;for i in range(narr):&#xA;    arr = wpdi.PointData[i]&#xA;    arr = np.reshape(arr, (iy,ix,iz))&#xA;    arr = np.swapaxes(arr,d1,d2)&#xA;    arr = np.reshape(arr, (ix*iy*iz))&#xA;    c = nps.numpy_to_vtk(num_array=arr,deep=True)&#xA;    c.SetName(pdi.GetPointData().GetArray(i).GetName())&#xA;    pdo.GetPointData().AddArray(c)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line" syntax="python"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;pdi = self.GetInput() #vtkImageData&#xA;[ix,iy,iz] = pdi.GetDimensions()&#xA;# Determine Swap order&#xA;if Swap == 0:&#xA;    nx, ny, nz = iy, ix, iz&#xA;elif Swap == 1:&#xA;    nx, ny, nz = iz, iy, ix&#xA;elif Swap == 2:&#xA;    nx, ny, nz = ix, iz, iy&#xA;else:&#xA;    raise Exception('Unknown axii swap.')&#xA;# ABSOLUTELY NECESSARY FOR THE IMAGEDATA FILTERS TO WORK:&#xA;util.SetOutputWholeExtent(self, [0,nx-1, 0,ny-1, 0,nz-1])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
