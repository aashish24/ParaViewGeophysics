<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="TableToUniformGrid" class="vtkPythonProgrammableFilter" label="Table To Uniform Grid">
      <Documentation
        long_help="TThis filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=x, d3=y). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters)."
        short_help="TThis filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=x, d3=y). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters).">
      </Documentation>
        <Hints>
            <ShowInMenu category="CSM Geophysics Filters" />
        </Hints>



      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkTable"/>
          </DataTypeDomain>
      </InputProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="SEPlib"
        label="SEPlib"
        initial_string="SEPlib"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Use the Stanford Exploration Project's axial conventions (d1=z, d2=x, d3=y). Parameters would be entered [z,x,y].</Documentation>
      </IntVectorProperty>


      <IntVectorProperty
        panel_visibility="default"
        name="extent"
        label="extent"
        initial_string="extent"
        command="SetParameter"
        animateable="1"
        default_values="1 1 1"
        number_of_elements="3">
        <Documentation></Documentation>
      </IntVectorProperty>


      <DoubleVectorProperty
        panel_visibility="default"
        name="origin"
        label="origin"
        initial_string="origin"
        command="SetParameter"
        animateable="1"
        default_values="0.0 0.0 0.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <DoubleVectorProperty
        panel_visibility="default"
        name="spacing"
        label="spacing"
        initial_string="spacing"
        command="SetParameter"
        animateable="1"
        default_values="1.0 1.0 1.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from vtk.util import numpy_support as nps&#xA;import numpy as np&#xA;pdi = self.GetInput()&#xA;image = self.GetOutput() #vtkImageData&#xA;&#xA;cols = pdi.GetNumberOfColumns()&#xA;rows = pdi.GetColumn(0).GetNumberOfTuples()&#xA;&#xA;# Setup the ImageData&#xA;if SEPlib:&#xA;    # SEPlib: d1=z, d2=x, d3=y&#xA;    nz,nx,ny = extent[0],extent[1],extent[2]&#xA;    sz,sx,sy = spacing[0],spacing[1],spacing[2]&#xA;    oz,ox,oy = origin[0],origin[1],origin[2]&#xA;else:&#xA;    # Cartesian: d1=x, d2=y, d3=z&#xA;    nx,ny,nz = extent[0],extent[1],extent[2]&#xA;    sx,sy,sz = spacing[0],spacing[1],spacing[2]&#xA;    ox,oy,oz = origin[0],origin[1],origin[2]&#xA;&#xA;# make sure dimensions work&#xA;if (nx*ny*nz != rows):&#xA;    raise Exception('Total number of elements must remain %d. Check reshape dimensions (n1 by n2 by n3).' % (rows))&#xA;&#xA;image.SetDimensions(nx, ny, nz)&#xA;image.SetOrigin(ox, oy, oz)&#xA;image.SetSpacing(sx, sy, sz)&#xA;image.SetExtent(0,nx-1, 0,ny-1, 0,nz-1)&#xA;&#xA;def RearangeSEPlib(arr):&#xA;    # SWAP D1 AND D3 THEN SWAP D2 AND D1&#xA;    import numpy as np&#xA;    n1,n2,n3 = extent[0],extent[1],extent[2]&#xA;    arr = np.reshape(arr, (n2,n3,n1))&#xA;    arr = np.swapaxes(arr,0,1)&#xA;    arr = np.swapaxes(arr,0,2)&#xA;    arr = np.reshape(arr, (n1*n2*n3))&#xA;    return arr&#xA;&#xA;&#xA;# Add all columns of the table as arrays to the PointData&#xA;for i in range(cols):&#xA;    c = pdi.GetColumn(i)&#xA;    if SEPlib:&#xA;        name = c.GetName()&#xA;        arr = nps.vtk_to_numpy(c)&#xA;        arr = RearangeSEPlib(arr)&#xA;        c = nps.numpy_to_vtk(num_array=arr,deep=True)&#xA;        c.SetName(name)&#xA;    #image.GetCellData().AddArray(c) # Should we add here? flipper won't flip these...&#xA;    image.GetPointData().AddArray(c)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line" syntax="python"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;# Setup the ImageData&#xA;# Cartesian: d1=x, d2=y, d3=z&#xA;nx,ny,nz = extent[0],extent[1],extent[2]&#xA;if SEPlib:&#xA;    # SEPlib: d1=z, d2=x, d3=y&#xA;    nz,nx,ny = extent[0],extent[1],extent[2]&#xA;# ABSOLUTELY NECESSARY FOR THE FILTER TO WORK:&#xA;util.SetOutputWholeExtent(self, [0,nx-1, 0,ny-1, 0,nz-1])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
