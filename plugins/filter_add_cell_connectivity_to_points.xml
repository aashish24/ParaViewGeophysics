<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="AddCellConnectivityToPoints" class="vtkPythonProgrammableFilter" label="Add Cell Connectivity To Points">
      <Documentation
        long_help="This filter will add linear cell connectivity between scattered points. You have the option to add VTK_Line or VTK_PolyLine connectivity. VTK_Line connectivity makes a straight line between the points in order (either in the order by index or using a nearest neighbor calculation). The VTK_PolyLine adds a poly line connectivity between all points as one spline (either in the order by index or using a nearest neighbor calculation)."
        short_help="This filter will add linear cell connectivity between scattered points. You have the option to add VTK_Line or VTK_PolyLine connectivity. VTK_Line connectivity makes a straight line between the points in order (either in the order by index or using a nearest neighbor calculation). The VTK_PolyLine adds a poly line connectivity between all points as one spline (either in the order by index or using a nearest neighbor calculation).">
      </Documentation>
        <Hints>
            <ShowInMenu category="CSM Geophysics Filters" />
        </Hints>

<IntVectorProperty
    name="Cell_Type"
    command="SetParameter"
    number_of_elements="1"
    initial_string="test_drop_down_menu"
    default_values="0">
    <EnumerationDomain name="enum">
          <Entry value="4" text="Poly Line"/>
          <Entry value="3" text="Line"/>
    </EnumerationDomain>
    <Documentation>
        Choose what type of cell connectivity to have.
    </Documentation>
</IntVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkPolyData"/>
          </DataTypeDomain>
      </InputProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Cell_Type"
        label="Cell Type"
        initial_string="Cell_Type"
        command="SetParameter"
        animateable="1"
        default_values="4"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>


      <IntVectorProperty
        panel_visibility="default"
        name="Use_nearest_nbr"
        label="Use nearest nbr"
        initial_string="Use_nearest_nbr"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Check this to use SciPy's cKDTree nearest neighbor algorithms to sort the points to before adding linear connectivity</Documentation>
      </IntVectorProperty>

      <!-- Output data type: "vtkPolyData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="0"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from datetime import datetime&#xA;import numpy as np&#xA;from vtk.util import numpy_support as nps&#xA;from vtk.numpy_interface import dataset_adapter as dsa&#xA;# NOTE: Type map is specified in vtkCellType.h&#xA;&#xA;startTime = datetime.now()&#xA;pdi = self.GetInput() # VTK PolyData Type&#xA;pdo = self.GetOutput() # VTK PolyData Type&#xA;&#xA;# Get the Points over the NumPy interface&#xA;wpdi = dsa.WrapDataObject(pdi) # NumPy wrapped input&#xA;points = np.array(wpdi.Points) # New NumPy array of poins so we dont destroy input&#xA;&#xA;pdo.DeepCopy(pdi)&#xA;numPoints = pdi.GetNumberOfPoints()&#xA;&#xA;if Use_nearest_nbr:&#xA;    from scipy.spatial import cKDTree&#xA;    # VTK_Line&#xA;    if Cell_Type == 3:&#xA;        sft = 0&#xA;        while(len(points) &gt; 1):&#xA;            tree = cKDTree(points)&#xA;            # Get indices of k nearest points&#xA;            dist, ind = tree.query(points[0], k=2)&#xA;            ptsi = [ind[0]+sft, ind[1]+sft]&#xA;            pdo.InsertNextCell(Cell_Type, 2, ptsi)&#xA;            points = np.delete(points, 0, 0) # Deletes first row&#xA;            del(tree)&#xA;            sft += 1&#xA;    # VTK_PolyLine&#xA;    elif Cell_Type == 4:&#xA;        tree = cKDTree(points)&#xA;        dist, ptsi = tree.query(points[0], k=numPoints)&#xA;        pdo.InsertNextCell(Cell_Type, numPoints, ptsi)&#xA;else:&#xA;    # VTK_PolyLine&#xA;    if Cell_Type == 4:&#xA;        ptsi = [i for i in range(numPoints)]&#xA;        pdo.InsertNextCell(Cell_Type, numPoints, ptsi)&#xA;    # VTK_Line&#xA;    elif Cell_Type == 3:&#xA;        for i in range(0, numPoints-1):&#xA;            ptsi = [i, i+1]&#xA;            pdo.InsertNextCell(Cell_Type, 2, ptsi)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line" syntax="python"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>


    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
